{
  "description": "CertificateList is a list of Certificate",
  "required": [
    "items"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "cert-manager.io/v1beta1"
      ]
    },
    "items": {
      "description": "List of certificates. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "description": "A Certificate resource should be created to ensure an up to date and signed x509 certificate is stored in the Kubernetes Secret resource named in `spec.secretName`. \n The stored certificate will be renewed before it expires (as configured by `spec.renewBefore`).",
        "type": [
          "object",
          "null"
        ],
        "required": [
          "spec"
        ],
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "cert-manager.io/v1beta1"
            ]
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "Certificate"
            ]
          },
          "metadata": {
            "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "annotations": {
                "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "clusterName": {
                "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "creationTimestamp": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "deletionGracePeriodSeconds": {
                "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int64"
              },
              "deletionTimestamp": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "finalizers": {
                "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "x-kubernetes-patch-strategy": "merge"
              },
              "generateName": {
                "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
                "type": [
                  "string",
                  "null"
                ]
              },
              "generation": {
                "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int64"
              },
              "labels": {
                "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "managedFields": {
                "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "fieldsType": {
                      "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "fieldsV1": {
                      "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                      "type": [
                        "object",
                        "null"
                      ]
                    },
                    "manager": {
                      "description": "Manager is an identifier of the workflow managing these fields.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "operation": {
                      "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "time": {
                      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                      "type": [
                        "string",
                        "null"
                      ],
                      "format": "date-time"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "name": {
                "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                "type": [
                  "string",
                  "null"
                ]
              },
              "namespace": {
                "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
                "type": [
                  "string",
                  "null"
                ]
              },
              "ownerReferences": {
                "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "required": [
                    "apiVersion",
                    "kind",
                    "name",
                    "uid"
                  ],
                  "properties": {
                    "apiVersion": {
                      "description": "API version of the referent.",
                      "type": "string"
                    },
                    "blockOwnerDeletion": {
                      "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    },
                    "controller": {
                      "description": "If true, this reference points to the managing controller.",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    },
                    "kind": {
                      "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                      "type": "string"
                    },
                    "uid": {
                      "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "x-kubernetes-patch-merge-key": "uid",
                "x-kubernetes-patch-strategy": "merge"
              },
              "resourceVersion": {
                "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                "type": [
                  "string",
                  "null"
                ]
              },
              "selfLink": {
                "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "uid": {
                "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          },
          "spec": {
            "description": "Desired state of the Certificate resource.",
            "type": "object",
            "required": [
              "issuerRef",
              "secretName"
            ],
            "properties": {
              "commonName": {
                "description": "CommonName is a common name to be used on the Certificate. The CommonName should have a length of 64 characters or fewer to avoid generating invalid CSRs. This value is ignored by TLS clients when any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4",
                "type": [
                  "string",
                  "null"
                ]
              },
              "dnsNames": {
                "description": "DNSNames is a list of DNS subjectAltNames to be set on the Certificate.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "duration": {
                "description": "The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types. If overridden and `renewBefore` is greater than the actual certificate duration, the certificate will be automatically renewed 2/3rds of the way through the certificate's duration.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "emailSANs": {
                "description": "EmailSANs is a list of email subjectAltNames to be set on the Certificate.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "encodeUsagesInRequest": {
                "description": "EncodeUsagesInRequest controls whether key usages should be present in the CertificateRequest",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "ipAddresses": {
                "description": "IPAddresses is a list of IP address subjectAltNames to be set on the Certificate.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "isCA": {
                "description": "IsCA will mark this Certificate as valid for certificate signing. This will automatically add the `cert sign` usage to the list of `usages`.",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "issuerRef": {
                "description": "IssuerRef is a reference to the issuer for this certificate. If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the Certificate will be used. If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "group": {
                    "description": "Group of the resource being referred to.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "kind": {
                    "description": "Kind of the resource being referred to.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "name": {
                    "description": "Name of the resource being referred to.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "keystores": {
                "description": "Keystores configures additional keystore output formats stored in the `secretName` Secret resource.",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "jks": {
                    "description": "JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "create",
                      "passwordSecretRef"
                    ],
                    "properties": {
                      "create": {
                        "description": "Create enables JKS keystore creation for the Certificate. If true, a file named `keystore.jks` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance.",
                        "type": "boolean"
                      },
                      "passwordSecretRef": {
                        "description": "PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "key": {
                            "description": "The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "name": {
                            "description": "Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "pkcs12": {
                    "description": "PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "create",
                      "passwordSecretRef"
                    ],
                    "properties": {
                      "create": {
                        "description": "Create enables PKCS12 keystore creation for the Certificate. If true, a file named `keystore.p12` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance.",
                        "type": "boolean"
                      },
                      "passwordSecretRef": {
                        "description": "PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "key": {
                            "description": "The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "name": {
                            "description": "Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "privateKey": {
                "description": "Options to control private keys used for the Certificate.",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "algorithm": {
                    "description": "Algorithm is the private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either `RSA` or `ECDSA` If `algorithm` is specified and `size` is not provided, key size of 256 will be used for `ECDSA` key algorithm and key size of 2048 will be used for `RSA` key algorithm.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "RSA",
                      "ECDSA"
                    ]
                  },
                  "encoding": {
                    "description": "The private key cryptography standards (PKCS) encoding for this certificate's private key to be encoded in. If provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1 and PKCS#8, respectively. Defaults to `PKCS1` if not specified.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "PKCS1",
                      "PKCS8"
                    ]
                  },
                  "rotationPolicy": {
                    "description": "RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. If set to Never, a private key will only be generated if one does not already exist in the target `spec.secretName`. If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention. If set to Always, a private key matching the specified requirements will be generated whenever a re-issuance occurs. Default is 'Never' for backward compatibility.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "size": {
                    "description": "Size is the key bit size of the corresponding private key for this certificate. If `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. No other values are allowed.",
                    "type": [
                      "integer",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              },
              "renewBefore": {
                "description": "The amount of time before the currently issued certificate's `notAfter` time that cert-manager will begin to attempt to renew the certificate. If this value is greater than the total duration of the certificate (i.e. notAfter - notBefore), it will be automatically renewed 2/3rds of the way through the certificate's duration.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "secretName": {
                "description": "SecretName is the name of the secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer.",
                "type": "string"
              },
              "subject": {
                "description": "Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "countries": {
                    "description": "Countries to be used on the Certificate.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "localities": {
                    "description": "Cities to be used on the Certificate.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "organizationalUnits": {
                    "description": "Organizational Units to be used on the Certificate.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "organizations": {
                    "description": "Organizations to be used on the Certificate.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "postalCodes": {
                    "description": "Postal codes to be used on the Certificate.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "provinces": {
                    "description": "State/Provinces to be used on the Certificate.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "serialNumber": {
                    "description": "Serial number to be used on the Certificate.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "streetAddresses": {
                    "description": "Street addresses to be used on the Certificate.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  }
                },
                "additionalProperties": false
              },
              "uriSANs": {
                "description": "URISANs is a list of URI subjectAltNames to be set on the Certificate.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "usages": {
                "description": "Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "description": "KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: \"signing\", \"digital signature\", \"content commitment\", \"key encipherment\", \"key agreement\", \"data encipherment\", \"cert sign\", \"crl sign\", \"encipher only\", \"decipher only\", \"any\", \"server auth\", \"client auth\", \"code signing\", \"email protection\", \"s/mime\", \"ipsec end system\", \"ipsec tunnel\", \"ipsec user\", \"timestamping\", \"ocsp signing\", \"microsoft sgc\", \"netscape sgc\"",
                  "type": [
                    "string",
                    "null"
                  ],
                  "enum": [
                    "signing",
                    "digital signature",
                    "content commitment",
                    "key encipherment",
                    "key agreement",
                    "data encipherment",
                    "cert sign",
                    "crl sign",
                    "encipher only",
                    "decipher only",
                    "any",
                    "server auth",
                    "client auth",
                    "code signing",
                    "email protection",
                    "s/mime",
                    "ipsec end system",
                    "ipsec tunnel",
                    "ipsec user",
                    "timestamping",
                    "ocsp signing",
                    "microsoft sgc",
                    "netscape sgc"
                  ]
                }
              }
            },
            "additionalProperties": false
          },
          "status": {
            "description": "Status of the Certificate. This is set and managed automatically.",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "conditions": {
                "description": "List of status conditions to indicate the status of certificates. Known condition types are `Ready` and `Issuing`.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "description": "CertificateCondition contains condition information for an Certificate.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "required": [
                    "status",
                    "type"
                  ],
                  "properties": {
                    "lastTransitionTime": {
                      "description": "LastTransitionTime is the timestamp corresponding to the last status change of this condition.",
                      "type": [
                        "string",
                        "null"
                      ],
                      "format": "date-time"
                    },
                    "message": {
                      "description": "Message is a human readable description of the details of the last transition, complementing reason.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "reason": {
                      "description": "Reason is a brief machine readable explanation for the condition's last transition.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "status": {
                      "description": "Status of the condition, one of (`True`, `False`, `Unknown`).",
                      "type": "string",
                      "enum": [
                        "True",
                        "False",
                        "Unknown"
                      ]
                    },
                    "type": {
                      "description": "Type of the condition, known values are (`Ready`, `Issuing`).",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "lastFailureTime": {
                "description": "LastFailureTime is the time as recorded by the Certificate controller of the most recent failure to complete a CertificateRequest for this Certificate resource. If set, cert-manager will not re-request another Certificate until 1 hour has elapsed from this time.",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "nextPrivateKeySecretName": {
                "description": "The name of the Secret resource containing the private key to be used for the next certificate iteration. The keymanager controller will automatically set this field if the `Issuing` condition is set to `True`. It will automatically unset this field when the Issuing condition is not set or False.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "notAfter": {
                "description": "The expiration time of the certificate stored in the secret named by this resource in `spec.secretName`.",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "notBefore": {
                "description": "The time after which the certificate stored in the secret named by this resource in spec.secretName is valid.",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "renewalTime": {
                "description": "RenewalTime is the time at which the certificate will be next renewed. If not set, no upcoming renewal is scheduled.",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "revision": {
                "description": "The current 'revision' of the certificate as issued. \n When a CertificateRequest resource is created, it will have the `cert-manager.io/certificate-revision` set to one greater than the current value of this field. \n Upon issuance, this field will be set to the value of the annotation on the CertificateRequest resource used to issue the certificate. \n Persisting the value on the CertificateRequest resource allows the certificates controller to know whether a request is part of an old issuance or if it is part of the ongoing revision's issuance by checking if the revision value in the annotation is greater than this field.",
                "type": [
                  "integer",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "x-kubernetes-group-version-kind": [
          {
            "group": "cert-manager.io",
            "kind": "Certificate",
            "version": "v1beta1"
          }
        ],
        "additionalProperties": false
      }
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "CertificateList"
      ]
    },
    "metadata": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
          "type": [
            "string",
            "null"
          ]
        },
        "remainingItemCount": {
          "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": [
            "string",
            "null"
          ]
        },
        "selfLink": {
          "description": "selfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "cert-manager.io",
      "kind": "CertificateList",
      "version": "v1beta1"
    }
  ],
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#",
  "type": "object"
}