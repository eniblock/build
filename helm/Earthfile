VERSION 0.6

kubeval:
    FROM golang:alpine
    WORKDIR /app
    RUN apk add git make bash patch
    RUN git clone -b 0.16.0 https://github.com/instrumenta/kubeval.git .
    COPY kubeval.patch ./
    RUN patch -p1 < kubeval.patch
    RUN make
    SAVE ARTIFACT /app/bin/kubeval

helmtools:
    FROM alpine:3.18
    RUN apk add \
      bash \
      curl \
      docker-cli \
      bat \
      yamllint \
      util-linux \
      py3-pip \
      py3-ruamel.yaml
    RUN wget -q https://dl.k8s.io/release/v1.20.2/bin/linux/amd64/kubectl -O /usr/local/bin/kubectl
    RUN curl -sSL https://get.helm.sh/helm-v3.10.1-linux-amd64.tar.gz | tar xvzC /usr/local/bin --strip-components=1 linux-amd64/helm
    RUN wget -q -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.7.1/yq_linux_amd64
    RUN curl -sSL https://github.com/stackrox/kube-linter/releases/download/v0.6.4/kube-linter-linux.tar.gz | tar xvzC /usr/local/bin
    COPY +kubeval/kubeval /usr/local/bin/
    COPY master-standalone-strict/ /master-standalone-strict/
    COPY --dir yamllint.yaml kube-linter.yaml /etc/
    COPY build lint split-yaml-docs /usr/local/bin/
    RUN chmod a+x /usr/local/bin/*
    RUN mkdir /generated
    WORKDIR /app
    ENV YAMLLINT_CONFIG_FILE=/etc/yamllint.yaml

BASE:
    FUNCTION
    FROM +helmtools

LOGIN:
    FUNCTION
    ARG registry=ghcr.io
    ARG username=eniblock
    RUN --no-cache \
        --secret registry_password \
        helm registry login -u "${username}" -p "${registry_password}" "${registry}"

UPDATE:
    FUNCTION
    ARG helmdir=.
    COPY "${helmdir}/Chart.yaml" ./Chart.yaml
    ARG login=false
    IF [ "${login}" = "true" ]
        ARG registry=ghcr.io
        ARG username=eniblock
        # login and logout in the same RUN in order to not use --no-cache nor keep any credential
        # in the cache
        RUN --secret registry_password \
            helm registry login -u "${username}" -p "${registry_password}" "${registry}" \
            && helm dependency update . \
            && helm registry logout "${registry}"
    ELSE
        RUN helm dependency update .
    END

LINT:
    FUNCTION
    ARG helmdir=.
    COPY "${helmdir}" ./
    ARG environment=dev
    RUN lint . --values values-${environment}.yaml

BUILD:
    FUNCTION
    ARG helmdir=.
    COPY "${helmdir}" ./
    ARG patch_app_version=true
    ARG patch_values
    ARG --required tag
    RUN /usr/local/bin/build "${tag}" "${patch_app_version}" "${patch_values}"

PUBLISH:
    FUNCTION
    ARG repository
    ARG package="*-*.tgz"
    RUN --push helm push $package "oci://$(dirname $repository)"

# this is deprecated, use PUBLISH
PUBLISH_HELM:
    FUNCTION
    ARG helmdir
    ARG image
    ARG patch_value
    ARG tag=latest
    DO +BASE
    DO +LOGIN
    DO +UPDATE --helmdir=${helmdir}
    DO +BUILD --helmdir=${helmdir} --patch_values=${patch_value} --tag=${tag}
    DO +PUBLISH --repository=${image}
